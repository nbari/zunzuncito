{"name":"Zunzuncito","tagline":"micro-framework for creating REST API's.","body":"### Design Goals\r\n* Keep it simple and small, avoiding extra complexity at all cost. [KISS](http://en.wikipedia.org/wiki/KISS_principle)\r\n* Create routes on the fly or by defining regular expressions.\r\n* Support API versions out of the box without altering routes.\r\n* Via decorator or in a defined route, accepts only certain [HTTP methods](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html).\r\n* Follow the single responsibility [principle](http://en.wikipedia.org/wiki/Single_responsibility_principle).\r\n* Be compatible with any WSGI server. Example: [uWSGI](http://uwsgi-docs.readthedocs.org/en/latest/), [Gunicorn](http://gunicorn.org/), [Twisted](http://twistedmatrix.com/), etc.\r\n* Structured Logging using [JSON](http://en.wikipedia.org/wiki/JSON).\r\n* No template rendering.\r\n* Tracing Request-ID \"rid\" per request.\r\n* Compatibility with Google App Engine. [demo](http://api.zunzun.io)\r\n* [Multi-tenant](http://en.wikipedia.org/wiki/Multitenancy) Support.\r\n\r\n> Documentation : [docs.zunzun.io](http://docs.zunzun.io)\r\n\r\n### What & Why ZunZuncito (ÃŸeta)\r\nZunZuncito is a [python](http://python.org/) package that allows to create and maintain [REST](http://en.wikipedia.org/wiki/REST) API's without hassle.\r\n\r\nThe simplicity for sketching and debugging helps to develop very fast; versioning is inherit by default, which allows to serve and maintain existing applications, while working in new releases with no need to create separate instances. All the applications are WSGI [PEP 333](http://www.python.org/dev/peps/pep-0333/) compliant, allowing to migrate existing code to more robust frameworks, without need to modify the existing code.\r\n\r\nThe idea of creating ZunZuncito, was the need of a very small and light tool (batteries included), that could help to create and deploy REST API's quickly, without forcing the developers to learn or follow a complex flow but, in contrast, from the very beginning, guide them to properly structure their API, giving special attention to \"versioned URI's\", having with this a solid base that allows to work in different versions within a single ZunZun instance without interrupting service of any existing API [resources](http://en.wikipedia.org/wiki/Web_resource).\r\n\r\n\r\n### How it works\r\n\r\nThe main application contains a **ZunZun** instance that must be served by a [WSGI compliant server](https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface). All requests are later handled by custom python modules; ZunZun is the name of the main class for the zunzuncito module.\r\n\r\nAll the custom python modules follow the same structure. They basically consist of a class called **APIResource** which contains a method called **dispatch** that will require two arguments: a WSGI environment \"environ\" as first argument and a function \"start_response\" that will start the response, [see PEP 333](http://www.python.org/dev/peps/pep-0333/)\r\n\r\nZunZun core turns around four arguments:\r\n\r\n```\r\nroot: directory containing all your API modules - see this like the \"document_root\"\r\nversions: list of supported versions ['v0', 'v1', etc...]\r\nhosts: dict of hosts:vroots Multitenant support\r\nroutes: dict of tuples containing regex patterns, py_mod and allowed http methods\r\n```\r\n\r\n> In the [docs](http://docs.zunzun.io) you can find a more detailed overview of the ZunZun arguments and the class itself.\r\n\r\nWhen a new request arrive, the ZunZun router searches for 'vroot' declared on the 'hosts' dictionary matching the current HTTP_HOST, a basic hosts dictionary looks like:\r\n\r\n```python\r\n\"\"\"\r\nformat is:\r\n    'host': 'vroot'\r\n    wildcard '*' can be used prefixing the host or to match all hosts\r\n\"\"\"\r\n{\r\n  '*': 'default', # match all hosts\r\n  '*.zunzun.io': 'default', # match all hosts ending with zunzun.io\r\n  'api.zunzun.io': 'api_zunzun_io' # match only api.zunzun.io\r\n}\r\n```\r\n\r\nOnce a **vroot** is found, the ZunZun router parses the [REQUEST_URI](http://en.wikipedia.org/wiki/URI_scheme) in order to accomplish this pattern:\r\n\r\n    /version/api_resource/path\r\n\r\nThe router first analyses the URI and determines if it is versioned or not by finding a match with the current specified versions, in case no one is found, fallback to the default which is always the first item on the versions list in case one provided, or 'v0'.\r\n\r\nAfter this process, the REQUEST_URI becomes a list of resources - something like:\r\n\r\n    ['version, 'api_resource', 'path']\r\n\r\nSuppose that the incoming request is:\r\n\r\n    'http://api.zunzun.io/v1/gevent/ip'\r\n\r\nZunZun will convert it to:\r\n\r\n    ['v1', 'gevent', 'ip']\r\n\r\nThe second step on the router is to find a match within the routes list and the local modules, but before going further lets see the directory structure for the root (document_root), the first and required argument for the ZunZun class.\r\n\r\n<pre>\r\nmy_api\r\n|--__init__.py\r\n`--default\r\n   |--__init__.py\r\n   |--v0\r\n   |  |--__init__.py\r\n   |  |--zun_default\r\n   |  |  |--__init__.py\r\n   |  |  `--zun_default.py\r\n   |  |--zun_gevent\r\n   |  |  |--__init__.py\r\n   |  |  `--zun_gevent.py\r\n   |  `--zun_my\r\n   |    |--__init__.py\r\n   |    `--zun_my.py\r\n   `--v1\r\n      |--__init__.py\r\n      |--zun_default\r\n      |  |--__init__.py\r\n      |  `--zun_default.py\r\n      |--zun_gevent\r\n      |  |--__init__.py\r\n      |  `--zun_gevent.py\r\n      `--zun_my\r\n        |--__init__.py\r\n        `--zun_my.py\r\n</pre>\r\n\r\nAs you can see basically it is a directory containing sub-directories which at the end are all python custom modules and can be called in a clean way like:\r\n\r\n    import my_api.default.v1.zun_default\r\n\r\n> notice the prefix **zun_**\r\n\r\nThis helps the router to dispatch all the request to an existing module, so continue with the flow, for the incoming request: http://api.zunzun.io/v1/gevent/ip we will try to find a module that matches the API resource 'gevent':\r\n\r\n    'http://api.zunzun.io/v1/gevent/ip' ==> ['v1', 'gevent', 'ip']\r\n    host = api.zunzun.io\r\n    vroot = default\r\n    version = v1\r\n    api_resource = gevent\r\n    path = ip\r\n\r\nIn case a list of routes is passed as an argument to the ZunZun instance, the router will try to match the api_resource with the items of the routes list. If no matches are found it will try to find the module in the root directory.\r\n\r\nThe routes format is very simple, it can be something like:\r\n\r\n```python\r\n\"\"\"\r\nformat is:\r\nregex pattern, handler (python module), allowed HTTP methods (defaults to ALL)\r\n\"\"\"\r\n[\r\n ('/.*', default),\r\n ('/test', default, 'POST, PUT, PATCH'),\r\n ('(?:[0-9]{1,3}\\.){3}[0-9]{1,3}', 'ip', 'GET')\r\n]\r\n```\r\n\r\nLets suppose these routes were passed to the ZunZun instance, therefore the router would try to find a match between the api_resource **gevent** in our example with the regex patterns in the list, basically something like:\r\n\r\n    gevent in: ['/.*', '/test', '(?:[0-9]{1,3}\\.){3}[0-9]{1,3}']\r\n\r\nif no match is found then the router would try to load the module from the root directory using something like:\r\n\r\n```python\r\nimport my_api.default.v1.zun_gevent.zun_gevent\r\n```\r\n\r\nIn case it doesn't find a module, an HTTP status [501 Not Implemented](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html) code is returned to the client. Otherwise the python module is imported by the router and the request is handled entirely by the imported module.\r\n\r\n\r\n### The zun_ prefix\r\n\r\nYou may ask, why the need of the \"zun_\" prefix and why not just create a simple structure having the same name that the api_resource.\r\n\r\nWell, this is more due the way python imports modules. It intends to avoid collisions by having same modules with the same name. You can change the prefix by passing it as an argument to the ZunZun instance or also disabling it by sending an empty prefix.\r\n\r\nIn the previous example, the REQUEST_URI contains an **APIResource** with the word **gevent**. The imported module name is in 'zun_gevent/zun_gevent.py' that gives the flexibility to use the [gevent](http://www.gevent.org/) library within your module without creating any conflict. Your zun_gevent.py would look like:\r\n\r\n```python\r\nimport gevent\r\nimport gevent.socket\r\n...\r\n```\r\n\r\nThat way you can have any work with gevent or any other API resource having an identical name of your current python modules without any conflict.\r\n\r\n\r\n### A basic example\r\n\r\nContents of file app.py:\r\n\r\n```python\r\nimport zunzuncito\r\n\r\nroot = 'my_api'\r\nversions = ['v0', 'v1', 'v2']\r\nhosts = {'*': 'default'}\r\nroutes = {'default': [\r\n    ('/my', 'ip_tools', 'GET'),\r\n    ('/status', 'http_status', 'GET'),\r\n    ('/upload/', 'test_post', 'PUT, POST'),\r\n    ('/.*', 'not_found')\r\n]}\r\napp = zunzuncito.ZunZun(root, versions, hosts, routes)\r\n```\r\n\r\nContents of file **zun_default.py** located in \"my_api/default/zun_default/zun_default.py\"\r\n\r\n> root: my_apy, vroot: default\r\n\r\n\r\n```python\r\n\"\"\"\r\nzun_default.py API resource\r\n\"\"\"\r\nimport json\r\nimport logging\r\nfrom zunzuncito import http_status_codes\r\nfrom zunzuncito.tools import MethodException, HTTPException, allow_methods, log_json\r\n\r\n\r\nclass APIResource(object):\r\n\r\n    def __init__(self, api):\r\n        self.api = api\r\n        self.status = 200\r\n        self.headers = api.headers.copy()\r\n        self.log = logging.getLogger()\r\n        self.log.info(log_json({\r\n            'vroot': api.vroot,\r\n            'API': api.version,\r\n            'URI': api.URI,\r\n            'method': api.method\r\n        }, True)\r\n        )\r\n \r\n\r\n    @allow_methods('get')\r\n    def dispatch(self, environ, start_response):\r\n        headers = self.api.headers\r\n        start_response(\r\n            getattr(http_status_codes, 'HTTP_%d' %\r\n                    self.status), list(headers.items()))\r\n        data = {}\r\n        data['about'] = (\"Hi %s, I am zunzuncito a micro-framework for creating\"\r\n                         \" REST API's, you can read more about me in: \"\r\n                         \"www.zunzun.io\") % environ.get('REMOTE_ADDR', 0)\r\n        data['request-id'] = self.api.request_id\r\n        data['URI'] = self.api.URI\r\n        data['method'] = self.api.method\r\n\r\n        return json.dumps(data, sort_keys=True, indent=4)\r\n```\r\n\r\nTo run it with gunicorn:\r\n\r\n    gunicorn -b :8080 -w4 app:app\r\n\r\nTo run it with uWSGI:\r\n\r\n    uwsgi --http :8080 --wsgi-file app.py --callable app --master\r\n\r\n\r\n### Install\r\n\r\n    git clone https://github.com/nbari/zunzuncito.git\r\n\r\n    python setup.py install\r\n\r\n### Demo\r\n\r\nCurrent demo running on Google App Engine.\r\n\r\n[http://api.zunzun.io](http://api.zunzun.io)\r\n\r\navailable API resources:\r\n\r\n* /my\r\n* /status\r\n\r\nTo get your current IP and location:\r\n\r\n    http://api.zunzun.io/my\r\n\r\nTo get only the IP:\r\n\r\n    http://api.zunzun.io/my/ip\r\n\r\n\r\nFor example, to get the meaning of status code 201\r\n\r\n    http://api.zunzun.io/status/201\r\n\r\n### GAE\r\n\r\nTu have a ZunZun instance up and running in Google App Engine these are the configurations:\r\n\r\nContents of the app.yaml file:\r\n\r\n```yaml\r\napplication: <your-GAE-application-id>\r\nversion: 1\r\nruntime: python27\r\napi_version: 1\r\nthreadsafe: yes\r\n\r\nhandlers:\r\n- url: /favicon\\.ico\r\n-   static_files: favicon.ico\r\n-     upload: favicon\\.ico\r\n-\r\n-     - url: .*\r\n-       script: main.app\r\n\r\n```\r\n\r\nContents of the main.py file:\r\n\r\n```python\r\n\r\nimport zunzuncito\r\n\r\nroot = 'my_api'\r\n\r\nversions = ['v0', 'v1']\r\n\r\nhosts = {\r\n    '*': 'default'\r\n}\r\n\r\nroutes = {}\r\nroutes['default'] = [\r\n    ('/my/?.*', 'ip_tools', 'GET'),\r\n    ('/status/?.*', 'http_status', 'GET'),\r\n    ('/(md5|sha1|sha256|sha512)/.*', 'hasher', 'GET')\r\n]\r\n\r\napp = zunzuncito.ZunZun(root, versions, hosts, routes, debug=False)\r\n\r\n```\r\n\r\nDirectory structure:\r\n\r\n<pre>\r\n<your-GAE-application-id>\r\n|--app.yaml\r\n|--main.py\r\n|--favicon.ico\r\n|--zunzuncito\r\n|  |--__init__.py\r\n|  |--http_status_codes.py\r\n|  |--tools.py\r\n|  `--zunzun.py`\r\n`--my_api\r\n  |--v0\r\n  | |--__init__.py\r\n  | |--zun_ip_tools\r\n  | | |--__init__.py\r\n  | | `--zun_ip_tools.py\r\n  | |--zun_http_status\r\n  | | |--__init__.py\r\n  | | `zun_http_status.py\r\n  `--v1\r\n    |--__init__.py\r\n    |--zun_ip_tools\r\n    | |--__init__.py\r\n    | `--zun_ip_tools.py\r\n    `--zun_http_status\r\n       |--__init__.py\r\n       `--zun_http_status.py\r\n</pre>\r\n\r\nBasically you just copy the zunzuncito module into your GAE application directory, define your root, versions and routes, create a ZunZun object and focus more on your API resources (custom python modules)\r\n","google":"UA-45578428-1","note":"Don't delete this file! It's used internally to help with page regeneration."}